{"ast":null,"code":"var _jsxFileName = \"/Users/farisaziz/Desktop/Projecs/Throwdown_Site/throwdown_site/hooks/useAuth.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n// Provider hook that creates an auth object and handles it's state\nimport { useState, useContext, createContext } from \"react\";\nimport { auth, db } from \"../config/firebase\";\nconst authContext = /*#__PURE__*/createContext({\n  user: {}\n});\nconst {\n  Provider\n} = authContext;\nexport function AuthProvider({\n  children\n}) {\n  const auth = useAuthProvider();\n  return __jsx(Provider, {\n    value: auth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 10\n    }\n  }, children);\n}\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\nconst useAuthProvider = () => {\n  const {\n    0: user,\n    1: setUser\n  } = useState(null);\n\n  const createUser = user => {\n    return db.collection(\"users\").doc(user.uid).set(user).then(() => {\n      setUser(user);\n      return user;\n    }).catch(error => {\n      return {\n        error\n      };\n    });\n  };\n\n  const signUp = ({\n    name,\n    email,\n    password\n  }) => {\n    return auth.createUserWithEmailAndPassword(email, password).then(response => {\n      auth.currentUser.sendEmailVerification();\n      return createUser({\n        uid: response.user.uid,\n        email,\n        name\n      });\n    }).catch(error => {\n      return {\n        error\n      };\n    });\n  };\n\n  return {\n    user,\n    signUp\n  };\n};","map":{"version":3,"sources":["/Users/farisaziz/Desktop/Projecs/Throwdown_Site/throwdown_site/hooks/useAuth.js"],"names":["useState","useContext","createContext","auth","db","authContext","user","Provider","AuthProvider","children","useAuthProvider","useAuth","setUser","createUser","collection","doc","uid","set","then","catch","error","signUp","name","email","password","createUserWithEmailAndPassword","response","currentUser","sendEmailVerification"],"mappings":";;;AAAA;AACA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,aAA/B,QAAoD,OAApD;AACA,SAASC,IAAT,EAAeC,EAAf,QAAyB,oBAAzB;AACA,MAAMC,WAAW,gBAAGH,aAAa,CAAC;AAAEI,EAAAA,IAAI,EAAE;AAAR,CAAD,CAAjC;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAeF,WAArB;AACA,OAAO,SAASG,YAAT,CAAsB;AAAEC,EAAAA;AAAF,CAAtB,EAAoC;AACzC,QAAMN,IAAI,GAAGO,eAAe,EAA5B;AACA,SAAO,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEP,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBM,QAAxB,CAAP;AACD;AACD,OAAO,MAAME,OAAO,GAAG,MAAM;AAC3B,SAAOV,UAAU,CAACI,WAAD,CAAjB;AACD,CAFM;;AAIP,MAAMK,eAAe,GAAG,MAAM;AAC5B,QAAM;AAAA,OAACJ,IAAD;AAAA,OAAOM;AAAP,MAAkBZ,QAAQ,CAAC,IAAD,CAAhC;;AACA,QAAMa,UAAU,GAAIP,IAAD,IAAU;AAC3B,WAAOF,EAAE,CACNU,UADI,CACO,OADP,EAEJC,GAFI,CAEAT,IAAI,CAACU,GAFL,EAGJC,GAHI,CAGAX,IAHA,EAIJY,IAJI,CAIC,MAAM;AACVN,MAAAA,OAAO,CAACN,IAAD,CAAP;AACA,aAAOA,IAAP;AACD,KAPI,EAQJa,KARI,CAQGC,KAAD,IAAW;AAChB,aAAO;AAAEA,QAAAA;AAAF,OAAP;AACD,KAVI,CAAP;AAWD,GAZD;;AAaA,QAAMC,MAAM,GAAG,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAD,KAA+B;AAC5C,WAAOrB,IAAI,CACRsB,8BADI,CAC2BF,KAD3B,EACkCC,QADlC,EAEJN,IAFI,CAEEQ,QAAD,IAAc;AAClBvB,MAAAA,IAAI,CAACwB,WAAL,CAAiBC,qBAAjB;AACA,aAAOf,UAAU,CAAC;AAAEG,QAAAA,GAAG,EAAEU,QAAQ,CAACpB,IAAT,CAAcU,GAArB;AAA0BO,QAAAA,KAA1B;AAAiCD,QAAAA;AAAjC,OAAD,CAAjB;AACD,KALI,EAMJH,KANI,CAMGC,KAAD,IAAW;AAChB,aAAO;AAAEA,QAAAA;AAAF,OAAP;AACD,KARI,CAAP;AASD,GAVD;;AAWA,SAAO;AACLd,IAAAA,IADK;AAELe,IAAAA;AAFK,GAAP;AAID,CA9BD","sourcesContent":["// Provider hook that creates an auth object and handles it's state\nimport { useState, useContext, createContext } from \"react\";\nimport { auth, db } from \"../config/firebase\";\nconst authContext = createContext({ user: {} });\nconst { Provider } = authContext;\nexport function AuthProvider({ children }) {\n  const auth = useAuthProvider();\n  return <Provider value={auth}>{children}</Provider>;\n}\nexport const useAuth = () => {\n  return useContext(authContext);\n};\n\nconst useAuthProvider = () => {\n  const [user, setUser] = useState(null);\n  const createUser = (user) => {\n    return db\n      .collection(\"users\")\n      .doc(user.uid)\n      .set(user)\n      .then(() => {\n        setUser(user);\n        return user;\n      })\n      .catch((error) => {\n        return { error };\n      });\n  };\n  const signUp = ({ name, email, password }) => {\n    return auth\n      .createUserWithEmailAndPassword(email, password)\n      .then((response) => {\n        auth.currentUser.sendEmailVerification();\n        return createUser({ uid: response.user.uid, email, name });\n      })\n      .catch((error) => {\n        return { error };\n      });\n  };\n  return {\n    user,\n    signUp,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}